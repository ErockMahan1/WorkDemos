<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20251.25.0520.1026                               -->
<workbook original-version='18.1' source-build='2025.1.2 (20251.25.0520.1026)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelExtractV2 />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='SAT_OLD_long' inline='true' name='federated.0lyyte616wsfer14djb3k0nmdvw5' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='SAT_OLD_long' name='textscan.1rts8ux0wbyvzi12wxrrb11i5i01'>
            <connection class='textscan' directory='C:/Users/emcdo/OneDrive/Documents/GitHub/SpringBoardProjects/Capstone3' filename='SAT_OLD_long.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1rts8ux0wbyvzi12wxrrb11i5i01' name='SAT_OLD_long.csv' table='[SAT_OLD_long#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='State' ordinal='0' />
            <column datatype='string' name='Year' ordinal='1' />
            <column datatype='string' name='Subject' ordinal='2' />
            <column datatype='integer' name='Score' ordinal='3' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[SAT_OLD_long.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[SAT_OLD_long.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[SAT_OLD_long.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Subject</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Subject]</local-name>
            <parent-name>[SAT_OLD_long.csv]</parent-name>
            <remote-alias>Subject</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Score</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Score]</local-name>
            <parent-name>[SAT_OLD_long.csv]</parent-name>
            <remote-alias>Score</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='SAT_OLD_long.csv' datatype='table' name='[__tableau_internal_object_id__].[SAT_OLD_long.csv_A847F2504445497183CEB7D355885BD2]' role='measure' type='quantitative' />
      <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/emcdo/AppData/Local/Temp/TableauTemp/#TableauTemp_09br8pa1s9aqn51dfwqqr0jgz17p.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='06/12/2025 05:10:35 PM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>0</ordinal>
              <family>SAT_OLD_long.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[SAT_OLD_long.csv_A847F2504445497183CEB7D355885BD2]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>1</ordinal>
              <family>SAT_OLD_long.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <object-id>[SAT_OLD_long.csv_A847F2504445497183CEB7D355885BD2]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Subject</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Subject]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Subject</remote-alias>
              <ordinal>2</ordinal>
              <family>SAT_OLD_long.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[SAT_OLD_long.csv_A847F2504445497183CEB7D355885BD2]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Score</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Score]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Score</remote-alias>
              <ordinal>3</ordinal>
              <family>SAT_OLD_long.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>341</approx-count>
              <contains-null>true</contains-null>
              <object-id>[SAT_OLD_long.csv_A847F2504445497183CEB7D355885BD2]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:State:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Colorado&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nevada&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Connecticut&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Maryland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;South Carolina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mississippi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;New York&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;New Hampshire&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Florida&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rhode Island&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Delaware&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pennsylvania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;West Virginia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Arizona&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Missouri&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Utah&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iowa&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Louisiana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Alabama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oregon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;South Dakota&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Illinois&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kansas&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Arkansas&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Montana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vermont&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Carolina&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hawaii&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;North Dakota&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indiana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kentucky&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oklahoma&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Massachusetts&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Jersey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wisconsin&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;California&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nebraska&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Virginia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maine&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Michigan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tennessee&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Idaho&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ohio&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;District of Columbia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Mexico&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Wyoming&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Alaska&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Minnesota&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Texas&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='SAT_OLD_long.csv' id='SAT_OLD_long.csv_A847F2504445497183CEB7D355885BD2'>
            <properties context=''>
              <relation connection='textscan.1rts8ux0wbyvzi12wxrrb11i5i01' name='SAT_OLD_long.csv' table='[SAT_OLD_long#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='State' ordinal='0' />
                  <column datatype='string' name='Year' ordinal='1' />
                  <column datatype='string' name='Subject' ordinal='2' />
                  <column datatype='integer' name='Score' ordinal='3' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
    <datasource caption='SAT_NEW_long' inline='true' name='federated.11t7efg1iybohx16ieuth0f119rh' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='SAT_NEW_long' name='textscan.1s9xl4x0k0n4sq120px4c1w1apaw'>
            <connection class='textscan' directory='C:/Users/emcdo/OneDrive/Documents/GitHub/SpringBoardProjects/Capstone3' filename='SAT_NEW_long.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1s9xl4x0k0n4sq120px4c1w1apaw' name='SAT_NEW_long.csv' table='[SAT_NEW_long#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='State' ordinal='0' />
            <column datatype='string' name='Year' ordinal='1' />
            <column datatype='string' name='Subject' ordinal='2' />
            <column datatype='integer' name='Score' ordinal='3' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[SAT_NEW_long.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[SAT_NEW_long.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[SAT_NEW_long.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Subject</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Subject]</local-name>
            <parent-name>[SAT_NEW_long.csv]</parent-name>
            <remote-alias>Subject</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Score</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Score]</local-name>
            <parent-name>[SAT_NEW_long.csv]</parent-name>
            <remote-alias>Score</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Year1' datatype='string' name='[Year]' role='dimension' type='nominal' />
      <column caption='SAT_NEW_long.csv' datatype='table' name='[__tableau_internal_object_id__].[SAT_NEW_long.csv_8B152C9DAD614870B2CA38E1B2DA2E0D]' role='measure' type='quantitative' />
      <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/emcdo/AppData/Local/Temp/TableauTemp/#TableauTemp_16pemoe1ha1f8z193aqj51d9jmni.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='06/12/2025 07:10:10 PM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>0</ordinal>
              <family>SAT_NEW_long.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[SAT_NEW_long.csv_8B152C9DAD614870B2CA38E1B2DA2E0D]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>1</ordinal>
              <family>SAT_NEW_long.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <object-id>[SAT_NEW_long.csv_8B152C9DAD614870B2CA38E1B2DA2E0D]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Subject</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Subject]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Subject</remote-alias>
              <ordinal>2</ordinal>
              <family>SAT_NEW_long.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[SAT_NEW_long.csv_8B152C9DAD614870B2CA38E1B2DA2E0D]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Score</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Score]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Score</remote-alias>
              <ordinal>3</ordinal>
              <family>SAT_NEW_long.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>257</approx-count>
              <contains-null>true</contains-null>
              <object-id>[SAT_NEW_long.csv_8B152C9DAD614870B2CA38E1B2DA2E0D]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:State:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Colorado&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nevada&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Connecticut&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Maryland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;South Carolina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mississippi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;New York&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;New Hampshire&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Florida&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rhode Island&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Delaware&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pennsylvania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;West Virginia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Arizona&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Missouri&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Utah&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iowa&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Louisiana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Alabama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oregon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;South Dakota&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Illinois&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kansas&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Arkansas&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Montana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vermont&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Carolina&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hawaii&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;North Dakota&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indiana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kentucky&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oklahoma&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Massachusetts&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Jersey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wisconsin&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;California&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nebraska&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Virginia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maine&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Michigan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tennessee&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Idaho&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ohio&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;District of Columbia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Mexico&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Wyoming&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Alaska&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Minnesota&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Texas&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='SAT_NEW_long.csv' id='SAT_NEW_long.csv_8B152C9DAD614870B2CA38E1B2DA2E0D'>
            <properties context=''>
              <relation connection='textscan.1s9xl4x0k0n4sq120px4c1w1apaw' name='SAT_NEW_long.csv' table='[SAT_NEW_long#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='State' ordinal='0' />
                  <column datatype='string' name='Year' ordinal='1' />
                  <column datatype='string' name='Subject' ordinal='2' />
                  <column datatype='integer' name='Score' ordinal='3' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
    <datasource caption='ACT_all_years_long' inline='true' name='federated.13nhwss1lnlii01f7th6d16xtesa' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ACT_all_years_long' name='textscan.1s1p7dh07zjbqw18x80yz0f0mt4r'>
            <connection class='textscan' directory='C:/Users/emcdo/OneDrive/Documents/GitHub/SpringBoardProjects/Capstone3' filename='ACT_all_years_long.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1s1p7dh07zjbqw18x80yz0f0mt4r' name='ACT_all_years_long.csv' table='[ACT_all_years_long#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='State' ordinal='0' />
            <column datatype='integer' name='Year' ordinal='1' />
            <column datatype='string' name='Subject' ordinal='2' />
            <column datatype='real' name='Score' ordinal='3' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[ACT_all_years_long.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[ACT_all_years_long.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[ACT_all_years_long.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Subject</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Subject]</local-name>
            <parent-name>[ACT_all_years_long.csv]</parent-name>
            <remote-alias>Subject</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Score</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Score]</local-name>
            <parent-name>[ACT_all_years_long.csv]</parent-name>
            <remote-alias>Score</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' datatype-customized='true' name='[Year]' role='dimension' type='nominal' />
      <column caption='ACT_all_years_long.csv' datatype='table' name='[__tableau_internal_object_id__].[ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6]' role='measure' type='quantitative' />
      <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/emcdo/AppData/Local/Temp/TableauTemp/#TableauTemp_05pfq1y01p1bch1ejjgn11lvr8fj.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='06/12/2025 07:27:19 PM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>0</ordinal>
              <family>ACT_all_years_long.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>1</ordinal>
              <family>ACT_all_years_long.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>8</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <object-id>[ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Subject</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Subject]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Subject</remote-alias>
              <ordinal>2</ordinal>
              <family>ACT_all_years_long.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Score</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Score]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Score</remote-alias>
              <ordinal>3</ordinal>
              <family>ACT_all_years_long.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>87</approx-count>
              <contains-null>true</contains-null>
              <object-id>[ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:State:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Colorado&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nevada&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Connecticut&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Maryland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;South Carolina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mississippi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;New York&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;New Hampshire&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Florida&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rhode Island&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Delaware&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pennsylvania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;West Virginia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Arizona&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Missouri&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Utah&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iowa&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Louisiana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Alabama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oregon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;South Dakota&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Illinois&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kansas&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Arkansas&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Montana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vermont&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Carolina&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hawaii&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;North Dakota&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indiana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kentucky&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oklahoma&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Massachusetts&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Jersey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wisconsin&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;California&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nebraska&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Virginia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maine&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Michigan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tennessee&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Idaho&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ohio&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;District of Columbia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Mexico&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Wyoming&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Alaska&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Minnesota&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Texas&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='ACT_all_years_long.csv' id='ACT_all_years_long.csv_E9657FA33697487AB4834A3AF97B2DB6'>
            <properties context=''>
              <relation connection='textscan.1s1p7dh07zjbqw18x80yz0f0mt4r' name='ACT_all_years_long.csv' table='[ACT_all_years_long#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='State' ordinal='0' />
                  <column datatype='integer' name='Year' ordinal='1' />
                  <column datatype='string' name='Subject' ordinal='2' />
                  <column datatype='real' name='Score' ordinal='3' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='ACT Statewide Changes'>
      <layout-options>
        <title>
          <formatted-text>
            <run>ACT State-By-State Scores</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ACT_all_years_long' name='federated.13nhwss1lnlii01f7th6d16xtesa' />
          </datasources>
          <datasource-dependencies datasource='federated.13nhwss1lnlii01f7th6d16xtesa'>
            <column datatype='real' name='[Score]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' datatype-customized='true' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Score]' derivation='Avg' name='[avg:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.13nhwss1lnlii01f7th6d16xtesa].[none:State:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Alabama&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Alaska&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Arizona&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Arkansas&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;California&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Colorado&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Connecticut&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Delaware&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;District of Columbia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Florida&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Hawaii&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Idaho&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Illinois&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Indiana&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Iowa&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Kansas&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Kentucky&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Louisiana&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Maine&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Maryland&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Massachusetts&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Michigan&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Minnesota&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Mississippi&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Missouri&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Montana&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Nebraska&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Nevada&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New Hampshire&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New Jersey&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New Mexico&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New York&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;North Carolina&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;North Dakota&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Ohio&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Oklahoma&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Oregon&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Pennsylvania&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Rhode Island&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;South Carolina&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;South Dakota&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Tennessee&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Texas&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Utah&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Vermont&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Virginia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Washington&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;West Virginia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Wisconsin&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Wyoming&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.13nhwss1lnlii01f7th6d16xtesa].[none:State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.13nhwss1lnlii01f7th6d16xtesa].[avg:Score:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.13nhwss1lnlii01f7th6d16xtesa].[sum:Score:qk]</rows>
        <cols>([federated.13nhwss1lnlii01f7th6d16xtesa].[none:State:nk] / [federated.13nhwss1lnlii01f7th6d16xtesa].[none:Year:nk])</cols>
      </table>
      <simple-id uuid='{61F21525-E69A-4DD1-B47C-E718C3E09393}' />
    </worksheet>
    <worksheet name='ACT top 5 per year'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top 5 ACT Scoring States Each Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ACT_all_years_long' name='federated.13nhwss1lnlii01f7th6d16xtesa' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.13nhwss1lnlii01f7th6d16xtesa'>
            <column datatype='real' name='[Score]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' datatype-customized='true' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[rank:sum:Score:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.13nhwss1lnlii01f7th6d16xtesa].[none:State:nk]' ordering-type='Field' rank-options='Competition,Descending' type='Rank' />
            </column-instance>
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.13nhwss1lnlii01f7th6d16xtesa].[none:State:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Massachusetts&quot;</bucket>
              <bucket>&quot;Connecticut&quot;</bucket>
              <bucket>&quot;New Hampshire&quot;</bucket>
              <bucket>&quot;New York&quot;</bucket>
              <bucket>&quot;Maine&quot;</bucket>
              <bucket>&quot;Vermont&quot;</bucket>
              <bucket>&quot;Rhode Island&quot;</bucket>
              <bucket>&quot;New Jersey&quot;</bucket>
              <bucket>&quot;Delaware&quot;</bucket>
              <bucket>&quot;Virginia&quot;</bucket>
              <bucket>&quot;Pennsylvania&quot;</bucket>
              <bucket>&quot;Maryland&quot;</bucket>
              <bucket>&quot;Washington&quot;</bucket>
              <bucket>&quot;California&quot;</bucket>
              <bucket>&quot;Idaho&quot;</bucket>
              <bucket>&quot;Indiana&quot;</bucket>
              <bucket>&quot;Minnesota&quot;</bucket>
              <bucket>&quot;District of Columbia&quot;</bucket>
              <bucket>&quot;Iowa&quot;</bucket>
              <bucket>&quot;South Dakota&quot;</bucket>
              <bucket>&quot;Kansas&quot;</bucket>
              <bucket>&quot;Michigan&quot;</bucket>
              <bucket>&quot;Illinois&quot;</bucket>
              <bucket>&quot;Ohio&quot;</bucket>
              <bucket>&quot;Oregon&quot;</bucket>
              <bucket>&quot;Colorado&quot;</bucket>
              <bucket>&quot;Wisconsin&quot;</bucket>
              <bucket>&quot;Nebraska&quot;</bucket>
              <bucket>&quot;Georgia&quot;</bucket>
              <bucket>&quot;Missouri&quot;</bucket>
              <bucket>&quot;Texas&quot;</bucket>
              <bucket>&quot;Alaska&quot;</bucket>
              <bucket>&quot;West Virginia&quot;</bucket>
              <bucket>&quot;Montana&quot;</bucket>
              <bucket>&quot;Utah&quot;</bucket>
              <bucket>&quot;North Dakota&quot;</bucket>
              <bucket>&quot;Oklahoma&quot;</bucket>
              <bucket>&quot;Wyoming&quot;</bucket>
              <bucket>&quot;Arkansas&quot;</bucket>
              <bucket>&quot;Kentucky&quot;</bucket>
              <bucket>&quot;Florida&quot;</bucket>
              <bucket>&quot;New Mexico&quot;</bucket>
              <bucket>&quot;Tennessee&quot;</bucket>
              <bucket>&quot;Arizona&quot;</bucket>
              <bucket>&quot;Alabama&quot;</bucket>
              <bucket>&quot;Nevada&quot;</bucket>
              <bucket>&quot;South Carolina&quot;</bucket>
              <bucket>&quot;Louisiana&quot;</bucket>
              <bucket>&quot;North Carolina&quot;</bucket>
              <bucket>&quot;Hawaii&quot;</bucket>
              <bucket>&quot;Mississippi&quot;</bucket>
              <bucket>&quot;United States&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <filter class='quantitative' column='[federated.13nhwss1lnlii01f7th6d16xtesa].[rank:sum:Score:qk:1]' included-values='in-range'>
            <max>5</max>
          </filter>
          <slices>
            <column>[federated.13nhwss1lnlii01f7th6d16xtesa].[rank:sum:Score:qk:1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.13nhwss1lnlii01f7th6d16xtesa].[Longitude (generated)]' field-type='quantitative' max='-6128855.0685557481' min='-11392342.976546019' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.13nhwss1lnlii01f7th6d16xtesa].[Latitude (generated)]' field-type='quantitative' max='6419700.6358470144' min='4410735.8034305936' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <tooltip column='[federated.13nhwss1lnlii01f7th6d16xtesa].[sum:Score:qk]' />
              <lod column='[federated.13nhwss1lnlii01f7th6d16xtesa].[none:State:nk]' />
              <color column='[federated.13nhwss1lnlii01f7th6d16xtesa].[sum:Score:qk]' />
              <geometry column='[federated.13nhwss1lnlii01f7th6d16xtesa].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.13nhwss1lnlii01f7th6d16xtesa].[none:Year:nk] * [federated.13nhwss1lnlii01f7th6d16xtesa].[Latitude (generated)])</rows>
        <cols>[federated.13nhwss1lnlii01f7th6d16xtesa].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{35480763-8C0E-4F85-A681-02C5145F08CD}' />
    </worksheet>
    <worksheet name='ACTYearByYear'>
      <layout-options>
        <title>
          <formatted-text>
            <run>ACT Scores By Year with Nationwide Year Average</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ACT_all_years_long' name='federated.13nhwss1lnlii01f7th6d16xtesa' />
          </datasources>
          <datasource-dependencies datasource='federated.13nhwss1lnlii01f7th6d16xtesa'>
            <column datatype='real' name='[Score]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' datatype-customized='true' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.13nhwss1lnlii01f7th6d16xtesa].[sum:Score:qk]' field-type='quantitative' max='133.77000000000001' min='80.0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dotted' />
            <format attr='stroke-size' id='refline0' value='5' />
            <format attr='stroke-color' id='refline0' value='#e15759' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.13nhwss1lnlii01f7th6d16xtesa].[sum:Score:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.13nhwss1lnlii01f7th6d16xtesa].[sum:Score:qk]' z-order='1' />
          </pane>
        </panes>
        <rows>[federated.13nhwss1lnlii01f7th6d16xtesa].[sum:Score:qk]</rows>
        <cols>([federated.13nhwss1lnlii01f7th6d16xtesa].[none:Year:nk] / [federated.13nhwss1lnlii01f7th6d16xtesa].[none:State:nk])</cols>
      </table>
      <simple-id uuid='{2312E934-A159-4AFC-9048-FE807B48C178}' />
    </worksheet>
    <worksheet name='SAT1 StateYear/Score'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top 5 SAT Scoring States Each Year (2012-2015)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SAT_OLD_long' name='federated.0lyyte616wsfer14djb3k0nmdvw5' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0lyyte616wsfer14djb3k0nmdvw5'>
            <column datatype='integer' name='[Score]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[rank:sum:Score:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk]' ordering-type='Field' rank-options='Competition,Descending' type='Rank' />
            </column-instance>
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Massachusetts&quot;</bucket>
              <bucket>&quot;Connecticut&quot;</bucket>
              <bucket>&quot;New Hampshire&quot;</bucket>
              <bucket>&quot;New York&quot;</bucket>
              <bucket>&quot;Maine&quot;</bucket>
              <bucket>&quot;Vermont&quot;</bucket>
              <bucket>&quot;Rhode Island&quot;</bucket>
              <bucket>&quot;New Jersey&quot;</bucket>
              <bucket>&quot;Delaware&quot;</bucket>
              <bucket>&quot;Virginia&quot;</bucket>
              <bucket>&quot;Pennsylvania&quot;</bucket>
              <bucket>&quot;Maryland&quot;</bucket>
              <bucket>&quot;Washington&quot;</bucket>
              <bucket>&quot;California&quot;</bucket>
              <bucket>&quot;Idaho&quot;</bucket>
              <bucket>&quot;Indiana&quot;</bucket>
              <bucket>&quot;Minnesota&quot;</bucket>
              <bucket>&quot;District of Columbia&quot;</bucket>
              <bucket>&quot;Iowa&quot;</bucket>
              <bucket>&quot;South Dakota&quot;</bucket>
              <bucket>&quot;Kansas&quot;</bucket>
              <bucket>&quot;Michigan&quot;</bucket>
              <bucket>&quot;Illinois&quot;</bucket>
              <bucket>&quot;Ohio&quot;</bucket>
              <bucket>&quot;Oregon&quot;</bucket>
              <bucket>&quot;Colorado&quot;</bucket>
              <bucket>&quot;Wisconsin&quot;</bucket>
              <bucket>&quot;Nebraska&quot;</bucket>
              <bucket>&quot;Georgia&quot;</bucket>
              <bucket>&quot;Missouri&quot;</bucket>
              <bucket>&quot;Texas&quot;</bucket>
              <bucket>&quot;Alaska&quot;</bucket>
              <bucket>&quot;West Virginia&quot;</bucket>
              <bucket>&quot;Montana&quot;</bucket>
              <bucket>&quot;Utah&quot;</bucket>
              <bucket>&quot;North Dakota&quot;</bucket>
              <bucket>&quot;Oklahoma&quot;</bucket>
              <bucket>&quot;Wyoming&quot;</bucket>
              <bucket>&quot;Arkansas&quot;</bucket>
              <bucket>&quot;Kentucky&quot;</bucket>
              <bucket>&quot;Florida&quot;</bucket>
              <bucket>&quot;New Mexico&quot;</bucket>
              <bucket>&quot;Tennessee&quot;</bucket>
              <bucket>&quot;Arizona&quot;</bucket>
              <bucket>&quot;Alabama&quot;</bucket>
              <bucket>&quot;Nevada&quot;</bucket>
              <bucket>&quot;South Carolina&quot;</bucket>
              <bucket>&quot;Louisiana&quot;</bucket>
              <bucket>&quot;North Carolina&quot;</bucket>
              <bucket>&quot;Hawaii&quot;</bucket>
              <bucket>&quot;Mississippi&quot;</bucket>
              <bucket>&quot;United States&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <filter class='quantitative' column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[rank:sum:Score:qk:1]' included-values='in-range'>
            <max>5</max>
          </filter>
          <slices>
            <column>[federated.0lyyte616wsfer14djb3k0nmdvw5].[rank:sum:Score:qk:1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0lyyte616wsfer14djb3k0nmdvw5].[Longitude (generated)]' field-type='quantitative' max='-7828038.7969614491' min='-13708753.84367884' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0lyyte616wsfer14djb3k0nmdvw5].[Latitude (generated)]' field-type='quantitative' max='6442552.5266882814' min='4198004.8190013729' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <tooltip column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]' />
              <lod column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk]' />
              <color column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]' />
              <geometry column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0lyyte616wsfer14djb3k0nmdvw5].[none:Year:nk] * [federated.0lyyte616wsfer14djb3k0nmdvw5].[Latitude (generated)])</rows>
        <cols>[federated.0lyyte616wsfer14djb3k0nmdvw5].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{F4AD02D2-0AF2-4735-A0CF-63A709D7196B}' />
    </worksheet>
    <worksheet name='SAT1 Statewide Changes'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SAT Scores By State (2012-2015)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SAT_OLD_long' name='federated.0lyyte616wsfer14djb3k0nmdvw5' />
          </datasources>
          <datasource-dependencies datasource='federated.0lyyte616wsfer14djb3k0nmdvw5'>
            <column datatype='integer' name='[Score]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Score]' derivation='Avg' name='[avg:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Alabama&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Alaska&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Arizona&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Arkansas&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;California&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Colorado&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Connecticut&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Delaware&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;District of Columbia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Florida&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Hawaii&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Idaho&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Illinois&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Indiana&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Iowa&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Kansas&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Kentucky&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Louisiana&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Maine&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Maryland&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Massachusetts&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Michigan&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Minnesota&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Mississippi&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Missouri&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Montana&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Nebraska&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Nevada&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New Hampshire&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New Jersey&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New Mexico&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New York&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;North Carolina&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;North Dakota&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Ohio&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Oklahoma&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Oregon&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Pennsylvania&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Rhode Island&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;South Carolina&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;South Dakota&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Tennessee&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Texas&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Utah&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Vermont&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Virginia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Washington&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;West Virginia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Wisconsin&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Wyoming&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]' field-type='quantitative' max='3820' min='2000' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[avg:Score:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]</rows>
        <cols>([federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk] / [federated.0lyyte616wsfer14djb3k0nmdvw5].[none:Year:nk])</cols>
      </table>
      <simple-id uuid='{0AEB401C-C1A3-4835-AF1B-291CADB86156}' />
    </worksheet>
    <worksheet name='SAT1YearByYear'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SAT State-By-State Scores (2012-2015)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SAT_OLD_long' name='federated.0lyyte616wsfer14djb3k0nmdvw5' />
          </datasources>
          <datasource-dependencies datasource='federated.0lyyte616wsfer14djb3k0nmdvw5'>
            <column datatype='integer' name='[Score]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]' field-type='quantitative' max='3820' min='2000' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dotted' />
            <format attr='stroke-size' id='refline0' value='5' />
            <format attr='stroke-color' id='refline0' value='#e15759' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]' z-order='1' />
          </pane>
        </panes>
        <rows>[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]</rows>
        <cols>([federated.0lyyte616wsfer14djb3k0nmdvw5].[none:Year:nk] / [federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk])</cols>
      </table>
      <simple-id uuid='{CC31FEF2-E011-4FCB-844D-AC69A0FA0FC9}' />
    </worksheet>
    <worksheet name='SAT2 StateYear/Score'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top 5 SAT Scoring States Each Year (2012-2015)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SAT_NEW_long' name='federated.11t7efg1iybohx16ieuth0f119rh' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.11t7efg1iybohx16ieuth0f119rh'>
            <column datatype='integer' name='[Score]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Year1' datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[rank:sum:Score:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk]' ordering-type='Field' rank-options='Competition,Descending' type='Rank' />
            </column-instance>
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Massachusetts&quot;</bucket>
              <bucket>&quot;Connecticut&quot;</bucket>
              <bucket>&quot;New Hampshire&quot;</bucket>
              <bucket>&quot;New York&quot;</bucket>
              <bucket>&quot;Maine&quot;</bucket>
              <bucket>&quot;Vermont&quot;</bucket>
              <bucket>&quot;Rhode Island&quot;</bucket>
              <bucket>&quot;New Jersey&quot;</bucket>
              <bucket>&quot;Delaware&quot;</bucket>
              <bucket>&quot;Virginia&quot;</bucket>
              <bucket>&quot;Pennsylvania&quot;</bucket>
              <bucket>&quot;Maryland&quot;</bucket>
              <bucket>&quot;Washington&quot;</bucket>
              <bucket>&quot;California&quot;</bucket>
              <bucket>&quot;Idaho&quot;</bucket>
              <bucket>&quot;Indiana&quot;</bucket>
              <bucket>&quot;Minnesota&quot;</bucket>
              <bucket>&quot;District of Columbia&quot;</bucket>
              <bucket>&quot;Iowa&quot;</bucket>
              <bucket>&quot;South Dakota&quot;</bucket>
              <bucket>&quot;Kansas&quot;</bucket>
              <bucket>&quot;Michigan&quot;</bucket>
              <bucket>&quot;Illinois&quot;</bucket>
              <bucket>&quot;Ohio&quot;</bucket>
              <bucket>&quot;Oregon&quot;</bucket>
              <bucket>&quot;Colorado&quot;</bucket>
              <bucket>&quot;Wisconsin&quot;</bucket>
              <bucket>&quot;Nebraska&quot;</bucket>
              <bucket>&quot;Georgia&quot;</bucket>
              <bucket>&quot;Missouri&quot;</bucket>
              <bucket>&quot;Texas&quot;</bucket>
              <bucket>&quot;Alaska&quot;</bucket>
              <bucket>&quot;West Virginia&quot;</bucket>
              <bucket>&quot;Montana&quot;</bucket>
              <bucket>&quot;Utah&quot;</bucket>
              <bucket>&quot;North Dakota&quot;</bucket>
              <bucket>&quot;Oklahoma&quot;</bucket>
              <bucket>&quot;Wyoming&quot;</bucket>
              <bucket>&quot;Arkansas&quot;</bucket>
              <bucket>&quot;Kentucky&quot;</bucket>
              <bucket>&quot;Florida&quot;</bucket>
              <bucket>&quot;New Mexico&quot;</bucket>
              <bucket>&quot;Tennessee&quot;</bucket>
              <bucket>&quot;Arizona&quot;</bucket>
              <bucket>&quot;Alabama&quot;</bucket>
              <bucket>&quot;Nevada&quot;</bucket>
              <bucket>&quot;South Carolina&quot;</bucket>
              <bucket>&quot;Louisiana&quot;</bucket>
              <bucket>&quot;North Carolina&quot;</bucket>
              <bucket>&quot;Hawaii&quot;</bucket>
              <bucket>&quot;Mississippi&quot;</bucket>
              <bucket>&quot;United States&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <filter class='quantitative' column='[federated.11t7efg1iybohx16ieuth0f119rh].[rank:sum:Score:qk:1]' included-values='in-range'>
            <max>5</max>
          </filter>
          <slices>
            <column>[federated.11t7efg1iybohx16ieuth0f119rh].[rank:sum:Score:qk:1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk]' />
              <color column='[federated.11t7efg1iybohx16ieuth0f119rh].[sum:Score:qk]' />
              <tooltip column='[federated.11t7efg1iybohx16ieuth0f119rh].[sum:Score:qk]' />
              <geometry column='[federated.11t7efg1iybohx16ieuth0f119rh].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.11t7efg1iybohx16ieuth0f119rh].[none:Year:nk] * [federated.11t7efg1iybohx16ieuth0f119rh].[Latitude (generated)])</rows>
        <cols>[federated.11t7efg1iybohx16ieuth0f119rh].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{EAA33A17-35DE-471F-9EDC-D8EDCDEE8439}' />
    </worksheet>
    <worksheet name='SAT2 Statewide Changes'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SAT Scores By State (2012-2015)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SAT_NEW_long' name='federated.11t7efg1iybohx16ieuth0f119rh' />
          </datasources>
          <datasource-dependencies datasource='federated.11t7efg1iybohx16ieuth0f119rh'>
            <column datatype='integer' name='[Score]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Year1' datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Score]' derivation='Avg' name='[avg:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Alabama&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Alaska&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Arizona&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Arkansas&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;California&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Colorado&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Connecticut&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Delaware&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;District of Columbia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Florida&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Hawaii&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Idaho&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Illinois&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Indiana&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Iowa&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Kansas&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Kentucky&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Louisiana&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Maine&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Maryland&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Massachusetts&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Michigan&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Minnesota&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Mississippi&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Missouri&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Montana&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Nebraska&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Nevada&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New Hampshire&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New Jersey&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New Mexico&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;New York&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;North Carolina&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;North Dakota&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Ohio&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Oklahoma&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Oregon&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Pennsylvania&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Rhode Island&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;South Carolina&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;South Dakota&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Tennessee&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Texas&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Utah&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Vermont&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Virginia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Washington&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;West Virginia&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Wisconsin&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;Wyoming&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.11t7efg1iybohx16ieuth0f119rh].[sum:Score:qk]' field-type='quantitative' max='2726' min='1750' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.11t7efg1iybohx16ieuth0f119rh].[avg:Score:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.11t7efg1iybohx16ieuth0f119rh].[sum:Score:qk]</rows>
        <cols>([federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk] / [federated.11t7efg1iybohx16ieuth0f119rh].[none:Year:nk])</cols>
      </table>
      <simple-id uuid='{D8B5F327-CFFF-4C1F-A559-17A8EA0ED094}' />
    </worksheet>
    <worksheet name='SAT2 YearByYear'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SAT State-By-State Scores (2017-2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SAT_NEW_long' name='federated.11t7efg1iybohx16ieuth0f119rh' />
          </datasources>
          <datasource-dependencies datasource='federated.11t7efg1iybohx16ieuth0f119rh'>
            <column datatype='integer' name='[Score]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Year1' datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.11t7efg1iybohx16ieuth0f119rh].[sum:Score:qk]' field-type='quantitative' max='2726' min='1500' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dotted' />
            <format attr='stroke-size' id='refline0' value='5' />
            <format attr='stroke-color' id='refline0' value='#e15759' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.11t7efg1iybohx16ieuth0f119rh].[sum:Score:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.11t7efg1iybohx16ieuth0f119rh].[sum:Score:qk]' z-order='1' />
          </pane>
        </panes>
        <rows>[federated.11t7efg1iybohx16ieuth0f119rh].[sum:Score:qk]</rows>
        <cols>([federated.11t7efg1iybohx16ieuth0f119rh].[none:Year:nk] / [federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk])</cols>
      </table>
      <simple-id uuid='{CED9233F-1F7F-443A-BAFC-8E1DD275016F}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='860' maxwidth='650' minheight='560' minwidth='420' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='49002' id='5' name='SAT2 StateYear/Score' w='97538' x='1231' y='50000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='49002' id='6' name='SAT1 StateYear/Score' w='97538' x='1231' y='998'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='8' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98004' id='7' param='vert' type-v2='layout-flow' w='97538' x='1231' y='998'>
                <zone fixed-size='280' h='49002' id='6' is-fixed='true' name='SAT1 StateYear/Score' w='97538' x='1231' y='998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49002' id='5' is-fixed='true' name='SAT2 StateYear/Score' w='97538' x='1231' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{BE635EF6-4128-4640-84F7-4BDEABA2AF75}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='89'>
    <window class='worksheet' name='ACT Statewide Changes'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.13nhwss1lnlii01f7th6d16xtesa].[avg:Score:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.13nhwss1lnlii01f7th6d16xtesa].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6733F426-254E-4227-BFCC-4806C47BEC7B}' />
    </window>
    <window class='worksheet' name='ACT top 5 per year'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.13nhwss1lnlii01f7th6d16xtesa].[none:State:nk]</field>
            <field>[federated.13nhwss1lnlii01f7th6d16xtesa].[none:Subject:nk]</field>
            <field>[federated.13nhwss1lnlii01f7th6d16xtesa].[none:Year:nk]</field>
            <field>[federated.13nhwss1lnlii01f7th6d16xtesa].[none:Year:qk]</field>
            <field>[federated.13nhwss1lnlii01f7th6d16xtesa].[sum:Score:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3CFA0CD5-6430-4A90-89EA-39C88F1491FE}' />
    </window>
    <window class='worksheet' name='ACTYearByYear'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.13nhwss1lnlii01f7th6d16xtesa].[sum:Score:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.13nhwss1lnlii01f7th6d16xtesa].[none:State:nk]</field>
            <field>[federated.13nhwss1lnlii01f7th6d16xtesa].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9A97995B-33A2-4967-96EA-B17A3260F94B}' />
    </window>
    <window class='worksheet' name='SAT1 Statewide Changes'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AEE573B1-0286-4ED6-98CA-90A72243E796}' />
    </window>
    <window class='worksheet' name='SAT1 StateYear/Score'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk]</field>
            <field>[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:Subject:nk]</field>
            <field>[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:Year:nk]</field>
            <field>[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:Year:qk]</field>
            <field>[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C6FDBF3E-0D96-4B0D-BE39-3443539D5100}' />
    </window>
    <window class='worksheet' name='SAT1YearByYear'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.0lyyte616wsfer14djb3k0nmdvw5].[sum:Score:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:State:nk]</field>
            <field>[federated.0lyyte616wsfer14djb3k0nmdvw5].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{552AA3F3-0262-42E9-8966-87593D9738AE}' />
    </window>
    <window class='worksheet' name='SAT2 Statewide Changes'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11t7efg1iybohx16ieuth0f119rh].[avg:Score:qk]</field>
            <field>[federated.11t7efg1iybohx16ieuth0f119rh].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{255CF0FE-3F8A-4A60-BB21-A8AB3A1E6A7A}' />
    </window>
    <window class='worksheet' name='SAT2 StateYear/Score'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk]</field>
            <field>[federated.11t7efg1iybohx16ieuth0f119rh].[none:Subject:nk]</field>
            <field>[federated.11t7efg1iybohx16ieuth0f119rh].[none:Year:qk]</field>
            <field>[federated.11t7efg1iybohx16ieuth0f119rh].[sum:Score:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1FBA31B3-D321-4986-A177-480162CABF2B}' />
    </window>
    <window class='worksheet' name='SAT2 YearByYear'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11t7efg1iybohx16ieuth0f119rh].[none:State:nk]</field>
            <field>[federated.11t7efg1iybohx16ieuth0f119rh].[none:Year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1B3632AC-E546-474F-838D-7E259E3655A2}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='SAT1 StateYear/Score'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SAT2 StateYear/Score'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='6' />
      <simple-id uuid='{C7E5E936-9CB5-44AB-A078-E9E35FD94BE3}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='ACT Statewide Changes' width='192'>
      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
      n2O7Pj2Do0yNDratL32X1dUVao5PV98w18aHWk4LQv0+yfrzVSo1l0TPANOTo23z3Vp9+/hC
      Mjg6ychAT9v+pfDZerFGoVIjmuhhZnoSo10/UrCzsUauVCUc62Ju5hrG+YddnMmXpLbWyRQq
      hCIJ5uamMdvl+y7PV1epOh5dfUNcGx+mUCi07B/gILVJ6qCAEYowOzdHxGz/eZ7d22ZnL4dh
      hpmZnSMavuADMi7C5voa1WqVwbFpDrY2On5i7WysU6lW6BueIr+zhdshP7X5gqJl0T0wTiW1
      0+ETWrL+/DnVao2p2Xm21lY79p/b3SRTsoj1DCEO9ih3yC+mt9gvVokk+zHyBx1O71A+2CWV
      K2HGuok7ZTK19mu8s/GCslWhd3iK4u427UfcYFdybKUySDPKcJfOTrrQNt+rldjYSuNrYaaG
      Y7zYOGibL/wq6+vbeNJk9novq89SbfNLe1vsFSuEE32YxSyFjmcAl9WVFziu5Mb8OKtPNjrk
      ezxffYHteMzNT/F8uX6d98YE4EuDu+/dI7uzQrZY6ZgvpMbtux9Q2lvjIF/6Gvkwv/A+tewm
      6Wyx87y4GeXevbusPX1Mudr5PoDwfa7PL2LUMmynsx3rS99jYu4OMVFiY+eg87y17zN6/SY9
      psPaVrpjfSHh1t0PKO+tsZ/rvH0QgoGxa4z3hHi2toXfoSEpJb3Dk1wfivNkdQOv0wpISffA
      GHPjPSwtP8fr8DUb6fuMz94hToUXO/sd1xcg1j3Awo0Jlpae4jR5/tt5IolevnV7hqXHS9Tc
      +pDyjQ2BfM9BaiaGJikUy/T09rS9EBa+iy8NTAMKhdLXyPfwhYZpahTyRbr7etuq3XMdNCOE
      Jj2K5Rq9PV3thxBS4Lo+4bBJIZcn2dfX9sJTSoHjeEQioXp+b2/bIQdIbNslEglRyheIdfe0
      HULUt4+OadTXt6evl0Kb/k/Xr5SKmNEkkTbTrCf5YaxyET0cJxpud2EusW2HSCRCrVJCmlFi
      kXYzTSf9FHN5Er29lDoMgWzbJhKJ4NQqOMIkGY+0qV/PD4fDeE6NmqfRlYi+OQG8C7QTwLuA
      6r8z6kfxikCjBKAINEoAikDz/wG90SgYEj5CjgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='ACT top 5 per year' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='ACTYearByYear' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      PDzceqP7H8283sKlknHAAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SAT1 StateYear/Score' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SAT1 Statewide Changes' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SAT1YearByYear' width='192'>
      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
      11QtZWREzTNaquV6FQ7bLHDYZgBaPE55/vjK3kQpQUir1Vk7SFCem69eNEzTpLywiBqL1XyS
      qYqPVmuP8tIy6u5urT0ymUp7KAqmaZ7uQ9mJtTVUXURPx1ANk+TmJv5IkI1HD/D0jeNwaOws
      bRMciOLr7ee+XeMnvvVbxBbX2dzPIIoiiV/9P0j/y99AFEVEUURdXCT2P77Fwvsf8nQtztO1
      OHe/903eePwuoiiyvpcmPb/Ev/+t32asnARBQJIk/nziCT+1X3vRRNvbY/+ttyk/qaUt/DPJ
      Wf6L2PeQJAlJkiCTqfh88KBqy//b/4+Df/iPaj6lMvtvvU3pO+/VfL7xB8T/zt9FkiQEQUDE
      5Evb7/KJbCWzmyiKfDK3wZe230V85h4U/8W/S/7r36huv5rf5kvb7+JGrw7pfm73PX4stVgt
      504pxpe238Wv1fKkJv7J/07mN/91dft6Mc6Xtt+lTy9W65j6v/5vMv/iX1a3tZUV9t96G21z
      s2pL/9qvk/6n/7S6rW/vVHwWlxAO5db/QeIpf2X/B5VOK4iYBwn233ob5fGT6u+yv/07JP7X
      f1LdNnP5Spt9/wdVWfjn0kv8/O63D8sRcAqVNvtYbqt6HPlv/jv23/47x/rZ39x+l0/nNqpl
      F//kT9h/620EXa/a4n/v71P4va9Xt8vf+y77b70NhULVlvjHv0Tud363uq08esT+W29jJpMV
      GflJA6AuOe5o7d9Ge4Yrf4RmePbRxoIzyvf73yQhu5g4tIX/2l9FsNeWO+2Tk/R85cvIf7AC
      icpJ/63wbRbCvfzsoc+O3cev9L/JhiPA0XPDr4Zv8kHUWy1H7u2l5698GcefbsJm5S7wjeB1
      lsJO/tahjxgI0POVL2MbqSX29f74F3F/sjYcE13Ois/QYM3nc5/FebemTzcQ+JX+N9m31fb/
      Xe8w3+h/E4PaXKXnb/03eBeT8CAGwCN3PzGbh78t1pr/n/W+Rk6qfTdh1tXLb/a/SVZyVm3h
      n/tZ0skifLuSe3TZGeZX+t/kv5bdHKUjDv3V/xye0dzbJyYqxzE8XLUF//J/duwOZRscoOcr
      X8Z+bQKylRdWvhaaxv7M3UeKRio+Y7UT7v/Jn8T47I/WfHze6r5yh7Z3/BM88NSSJSuCxK/0
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SAT2 StateYear/Score' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='SAT2 Statewide Changes' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SAT2 YearByYear' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
